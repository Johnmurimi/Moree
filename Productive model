# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.model_selection import cross_val_score
from sklearn.metrics import roc_auc_score

# Load your dataset
data = pd.read_csv('your_data.csv')

# Assuming your dataset has columns like 'TextData', 'Facebook_Interactions', 'Twitter_Interactions', 'Instagram_Interactions', 'Support_Label'
# 'Support_Label' is the target variable indicating support for a particular candidate (1 or 0)

# Split the data into features and target variable
X = data[['TextData', 'Facebook_Interactions', 'Twitter_Interactions', 'Instagram_Interactions']]
y = data['Support_Label']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a TfidfVectorizer to convert text data into numerical features
tfidf_vectorizer = TfidfVectorizer(max_features=1000, stop_words='english', ngram_range=(1, 2))
X_train_text_tfidf = tfidf_vectorizer.fit_transform(X_train['TextData'])
X_test_text_tfidf = tfidf_vectorizer.transform(X_test['TextData'])

# Combine text features with numeric features
X_train_combined = pd.concat([X_train_text_tfidf, X_train.drop('TextData', axis=1)], axis=1)
X_test_combined = pd.concat([X_test_text_tfidf, X_test.drop('TextData', axis=1)], axis=1)

# Initialize and train the RandomForest classifier
model = RandomForestClassifier(random_state=42)
model.fit(X_train_combined, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test_combined)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
roc_auc = roc_auc_score(y_test, model.predict_proba(X_test_combined)[:, 1])

# Cross-validation to assess model performance
cv_scores = cross_val_score(model, X_train_combined, y_train, cv=5, scoring='accuracy')

# Print the results
print(f'Accuracy: {accuracy}')
print('Classification Report:\n', report)
print('Confusion Matrix:\n', conf_matrix)
print(f'ROC AUC Score: {roc_auc}')
print(f'Cross-Validation Accuracy: {cv_scores.mean()} +/- {cv_scores.std()}')
